name: CMake

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - '**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # Set the memory check environment variable based on the base branch or on the manual setting of the variable.
  BUILD_TYPE: Release
  RUN_MEMORY_CHECK: ${{ (github.base_ref == 'master') || ((secrets.RUN_MEMORY_CHECK == 'true') }}

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Valgrind
      if: ${{ env.RUN_MEMORY_CHECK == 'true' }}
      run: |
        sudo apt install valgrind
        echo "Valgrind installed"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Valgrind Memory check
      # If we enabled the memory check environment variable, run the checks.
      if: ${{ env.RUN_MEMORY_CHECK == 'true' }}
      run: |
        valgrind --leak-check=yes --log-file=valgrind.rpt Progetto_SO

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
